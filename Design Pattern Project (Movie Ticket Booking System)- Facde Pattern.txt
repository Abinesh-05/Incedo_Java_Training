1. Facade Pattern
The Facade Pattern provides a simplified interface to a complex subsystem, making it easier to use. In the case of a movie ticket booking system, there can be a lot of components involved, such as:

User authentication
Movie and showtime selection
Ticket booking
Payment processing
Notification system (email/SMS)
Seat availability checks

Why Facade Pattern is Suitable?
Simplifies Interface: Instead of dealing with the complex details of booking a ticket (such as managing seat availability, payments, and show timings), the user can interact with a single class or interface.
Reduces Dependencies: It decouples the client code from the complexities of various subsystems. This reduces the number of interactions with different components.
Improves Maintainability: The underlying system can change (e.g., adding new payment methods or updating the booking process), but the client code remains the same because it interacts with a single simplified interface.

The Facade provides a unified interface to a set of interfaces in the subsystem. The client interacts with the Facade, and the Facade delegates calls to appropriate subsystems (e.g., payment processing, ticket booking, etc.).

Example: Movie Ticket Booking System Using Facade Pattern
Let's break down how you might implement a Facade for this system:

Define Subsystems
Movie Selection: This class allows users to select a movie and show time.
Seat Reservation: Manages the seat availability and selection.
Payment Processing: Handles payment for the booking.
Ticket Generation: Creates the ticket after the booking is successful


Benefits of Using the Facade Pattern in This Context:

Simplifies Complex Interactions: 
The user does not need to understand the complex process of selecting a movie, reserving a seat, processing payment, and generating the ticket. The facade handles all the complexity.

Reduced Coupling: 
The client code is decoupled from the internals of the booking system. It doesn't need to know about individual subsystems, just the bookTicket() method on the Facade.

Easier Maintenance: 
If you need to change the way payment processing works, or if a new subsystem is added (e.g., a notification system), the changes will be isolated in the subsystems, and the client code remains unaffected.
